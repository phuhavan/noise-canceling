/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "nc_test.h"

void print(char *str);

int main()
{
	init_platform();

	Xint32 A, B, C, D, A1, B1;
	Xint32 out_fft_c1re, out_fft_c1im, out_fft_c2re, out_fft_c2im, out_finish;
	int i;

	//	// write 128 sample to nc_re
	for (i=0; i<128; i++){
		if(i==0) A1 = 128;
		else if(i==1) A1 = 256;
		else if(i==2) A1 = 64;
		else if(i==3) A1 = 192;
		else A1 = 0;
		NC_TEST_mWriteSlaveReg2(XPAR_NC_TEST_0_BASEADDR,0,A1);
	}
	// wait
	for(i=0;i<100;i++);


	// write 64 sample to c1 and c2
	for (i=0; i<64; i++){
		if(i==0){
			A = 64;
			B = 128;
		}
		else if(i==1){
			A = 128;
			B = 64;
		}
		else if(i==2){
			A = 192;
			B = 256;
		}
		else if(i==3){
			A = 256;
			B = 192;
		}
		else {
			A = 0;
			B = 0;
		}
		NC_TEST_mWriteSlaveReg0(XPAR_NC_TEST_0_BASEADDR,0,A);
		NC_TEST_mWriteSlaveReg1(XPAR_NC_TEST_0_BASEADDR,0, B);
	}

	// wait
	for(i=0;i<100;i++);

	// write 64 sample to c1 c2
	for (i=0; i<64; i++){

		if(i==0){

			C = 256;
			D = 192;
		}
		else if(i==1){

			C = 192;
			D = 256;
		}
		else if(i==2){

			C = 128;
			D = 64;
		}
		else if(i==3){

			C = 64;
			D = 128;
		}
		else {

			C = 0;
			D = 0;
		}

		NC_TEST_mWriteSlaveReg0(XPAR_NC_TEST_0_BASEADDR,0,C);
		NC_TEST_mWriteSlaveReg1(XPAR_NC_TEST_0_BASEADDR,0,D);
	}

	// wait
	for(i=0;i<100;i++);

	// read fft_c1re, fft_c1im, fft_c2re, fft_c2im, ifft
	for(i=0;i<128;i++)
	{

		out_fft_c1re = NC_TEST_mReadSlaveReg4(XPAR_NC_TEST_0_BASEADDR, 0);
		out_fft_c1im = NC_TEST_mReadSlaveReg5(XPAR_NC_TEST_0_BASEADDR, 0);
		out_fft_c2re = NC_TEST_mReadSlaveReg6(XPAR_NC_TEST_0_BASEADDR, 0);
		out_fft_c2im = NC_TEST_mReadSlaveReg7(XPAR_NC_TEST_0_BASEADDR, 0);
		out_finish = NC_TEST_mReadSlaveReg8(XPAR_NC_TEST_0_BASEADDR, 0);
		printf("\n [%d]\t\tout_fft_c1re = %d "
				"\tout_fft_c1im = %d || "
				"\tout_fft_c2re = %d "
				"\tout_fft_c2im = %d ||"
				"\tout_finish = %d",
				i, out_fft_c1re,out_fft_c1im, out_fft_c2re, out_fft_c2im, out_finish );
		printf("i=%d",i);
	}



	///home/phuhv/Workspace/NoiseCancelling/1403110617_final_R2L/project/SDK/SDK_Export/noiseCancer/Debug
	return 0;
}
